name: Publish NuGet from tags

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'                # stable s 'v'
      - 'v[0-9]+.[0-9]+.[0-9]+-preview.[0-9]+' # preview s 'v'

jobs:
  pack_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Compute version from tag
        id: ver
        shell: bash
        run: |
          RAW="${GITHUB_REF_NAME}"   # např. 'v6.0.0-preview.2' nebo '6.0.0'
          # strip optional 'v' prefix
          if [[ "$RAW" == v* ]]; then RAW="${RAW#v}"; fi

          # povolené formáty: X.Y.Z nebo X.Y.Z-preview.N
          if [[ ! "$RAW" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?$ ]]; then
            echo "Tag '$GITHUB_REF_NAME' neodpovídá povolenému formátu 'X.Y.Z' nebo 'X.Y.Z-preview.N'." >&2
            exit 1
          fi

          echo "version=$RAW" >> "$GITHUB_OUTPUT"

      - name: Restore
        run: dotnet restore ./src/Jiper.FontAwesome.Blazor/Jiper.FontAwesome.Blazor.csproj

      - name: Restore IconNames
        run: dotnet restore ./src/Jiper.FontAwesome.IconNames/Jiper.FontAwesome.IconNames.csproj

      - name: Build (Release)
        run: |
          dotnet build ./src/Jiper.FontAwesome.Blazor/Jiper.FontAwesome.Blazor.csproj \
            -c Release \
            -p:ContinuousIntegrationBuild=true \
            -p:Version=${{ steps.ver.outputs.version }}

      - name: Build IconNames (Release)
        run: |
          dotnet build ./src/Jiper.FontAwesome.IconNames/Jiper.FontAwesome.IconNames.csproj \
            -c Release \
            -p:ContinuousIntegrationBuild=true \
            -p:Version=${{ steps.ver.outputs.version }}

      - name: Pack (no build)
        run: |
          dotnet pack ./src/Jiper.FontAwesome.Blazor/Jiper.FontAwesome.Blazor.csproj \
            -c Release \
            --no-build \
            -p:ContinuousIntegrationBuild=true \
            -p:Version=${{ steps.ver.outputs.version }} \
            -o ./artifacts

      - name: Pack IconNames (no build)
        run: |
          dotnet pack ./src/Jiper.FontAwesome.IconNames/Jiper.FontAwesome.IconNames.csproj \
            -c Release \
            --no-build \
            -p:ContinuousIntegrationBuild=true \
            -p:Version=${{ steps.ver.outputs.version }} \
            -o ./artifacts

      - name: Push to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push "./artifacts/*.nupkg" \
            --api-key "$NUGET_API_KEY" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
